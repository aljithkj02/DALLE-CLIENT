import React, { useState, useEffect, useRef } from 'react'
import axios from 'axios'
import { Card, Loader, FormField } from '../components';
import config from '../config'

const RenderCards = ({ data, title}) => {
    if(data?.length > 0) {
        return data.map((post)=> {
            return <Card key={post._id} {...post} />
        }) 
    }
 
    return (
        <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
    )
}

const Home = () => {
    const [loading, setLoading] = useState(false);
    const [allPosts, setAllPosts] = useState([]);
    const [noPost, setNoPost] = useState(false);
    const [skip, setSkip] = useState(0); 
    const [update, setUpdate] = useState(false); 
    const [searchText, setSearchText] = useState('');
    const [searching, setSearching] = useState(false);
    const [searchedResults, setSearchedResults] = useState([]);
    const debounceId = useRef(null);
    const divRef = useRef(null);

    useEffect(() => {
        if(!searching) fetchPosts();
    }, [skip, update])

    const fetchPosts = async () => {
        setLoading(true);
        try {
            let response = await axios.get(`${config.API_URL}/api/v1/post?skip=${skip}&limit=5`);
            setAllPosts([...allPosts, ...response.data.data.reverse()]);
            if(response.data.data.length == 0) setNoPost(true);
        } catch (err) {
            console.log(err);
            alert(err);
        } finally {
            setLoading(false);
        }
    }

    const fetchSearchPost = async (query) => {
        setLoading(true);
        setNoPost(false);
        try {
            let res = await axios.get(`${config.API_URL}/api/v1/post/search?q=${query}`);
            setSearchedResults([...res.data.data]);
        } catch (err) {
            console.log(err.message);
        } finally{
            setLoading(false);
        }
    }

    const handleSearchChange = async (e) => {
        let val = e.target.value;
        setSearchText(val);
        if(val) {
            setSearching(true);
            debouncer(() => fetchSearchPost(val), 1000)();
        }else{
            setSearching(false);
            setAllPosts([]);
            setSkip(0);
            setUpdate(!update);
        }
    }

    const debouncer = (fn, delay) => {
        return () => {
            debounceId.current && clearTimeout(debounceId.current);
            debounceId.current = setTimeout(() => {
                fn();
            }, delay)
        }
    }

    const handlerScroll = () => { 
        if(Math.floor(window.innerHeight + document.documentElement.scrollTop + 1 )  >= document.documentElement.offsetHeight){
            setSkip(allPosts.length);
        }
    }
    window.onscroll = handlerScroll;


  return (
    <section className="max-w-7xl mx-auto mt-20"> 
        <div>
            <h1 className="font-extrabold text-[#222328] text-[32px]" >The Community Showcase</h1>
            <p className="mt-2 text-[#666e75] text-[16px] max-w-[600px]">Browse through a collection of imaginative and visually stunning images generated by VisualizeAI</p>
        </div>

        <div className="mt-16">
            <FormField 
                handleChange={ handleSearchChange  }
                LabelName="Search posts"
                type="text"
                name="text"
                placeholder="Search posts"
                value={ searchText }
            />
        </div>

        <div className="mt-10">
            {
                <>
                    { searchText && (
                        <h2 className="font-medium text-[#666e75] text-xl mb-3">
                            Showing results for <span className="text-[#222328]"> {searchText} </span>
                        </h2> 
                    ) }

                    <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3" 
                            ref={ divRef }
                    >
                        {(searchText)? (
                            <RenderCards data={ searchedResults } title="No search results found" />
                        ): (
                            <RenderCards data={ allPosts } title="No posts found" />
                        )}
                    </div>
                </>
            }
            {
                (loading) && (
                    <div className="flex justify-center align-center mt-10">
                        <Loader />
                    </div>
                )
            }
            {
                noPost && <h1 className="text-center text-lg font-medium mt-10">No more posts!</h1>
            }
        </div>

    </section>
  )
}

export default Home
