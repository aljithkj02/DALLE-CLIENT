import React, { useState, useEffect, useRef } from 'react'
import axios from 'axios'
import { Card, Loader, FormField } from '../components';
import config from '../config'

const RenderCards = ({ data, title}) => {
    if(data?.length > 0) {
        return data.map((post)=> {
            return <Card key={post._id} {...post} />
        }) 
    }
 
    return (
        <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
    )
}

const Home = () => {
    const [loading, setLoading] = useState(false);
    const [allPosts, setAllPosts] = useState(null);
    const [searchText, setSeachText] = useState('');
    const [searchedResults, setSearchedResults] = useState(null);
    const debounceId = useRef(null);

    useEffect(() => {
        fetchPosts();
    }, [])

    const fetchPosts = async () => {
        setLoading(true);
        try {
            let response = await axios.get(`${config.API_URL}/api/v1/post`);
            setAllPosts(response.data.data.reverse());
        } catch (err) {
            console.log(err);
            alert(err);
        } finally {
            setLoading(false);
        }
    }

    const handleSearchChange = async (e) => {
        debounceId.current && clearTimeout(debounceId.current);
        setSeachText(e.target.value);

        debounceId.current = setTimeout(() => {
            const searchResults = allPosts.filter((item) => {
                return ( 
                    item.name.toLowerCase().includes(e.target.value.toLowerCase()) || 
                    item.prompt.toLowerCase().includes(e.target.value.toLowerCase()) )
            })
            setSearchedResults(searchResults);
        }, 1000);
    }

  return (
    <section className="max-w-7xl mx-auto">

        <div>
            <h1 className="font-extrabold text-[#222328] text-[32px]" >The Community Showcase</h1>
            <p className="mt-2 text-[#666e75] text-[16px] max-w-[600px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
        </div>

        <div className="mt-16">
            <FormField 
                handleChange={ handleSearchChange  }
                LabelName="Search posts"
                type="text"
                name="text"
                placeholder="Search posts"
                value={ searchText }
            />
        </div>

        <div className="mt-10">
            {
                (loading)? (
                    <div className="flex justify-center align-center">
                        <Loader />
                    </div>
                ): (
                    <>
                        { searchText && (
                            <h2 className="font-medium text-[#666e75] text-xl mb-3">
                                Showing results for <span className="text-[#222328]"> {searchText} </span>
                            </h2>
                        ) }

                        <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
                            {(searchText)? (
                                <RenderCards data={ searchedResults } title="No search results found" />
                            ): (
                                <RenderCards data={ allPosts } title="No posts found" />
                            )}
                        </div>
                    </>
                )
            }
        </div>

    </section>
  )
}

export default Home
